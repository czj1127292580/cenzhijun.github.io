I"[<h1 id="masonry-实现原理及链式调用分析"><a href="https://github.com/SnapKit/Masonry">Masonry</a> 实现原理及链式调用分析</h1>

<blockquote>
  <p>Masonry is a light-weight layout framework which wraps AutoLayout with a nicer syntax. Masonry has its own layout DSL which provides a chainable way of describing your NSLayoutConstraints which results in layout code that is more concise and readable. Masonry supports iOS and Mac OS X.</p>
</blockquote>

<p>翻译：</p>

<blockquote>
  <p>Masonry是一个轻量级的布局框架，它使用更好的语法包装AutoLayout。 Masonry有自己的布局DSL，它提供了一种链式调用的方式来描述NSLayoutConstraints，从而使布局代码更简洁，更易读。 Masonry支持iOS和Mac OS X.</p>
</blockquote>

<h2 id="什么是dsl">什么是DSL</h2>
<blockquote>
  <p>DSL(Domain Specific Language) 翻译成中文就是:“领域特定语言”。首先，从定义就可以看出，DSL 也是一种编程语言，只不过它主要是用来处理某个特定领域的问题。
  下边介绍iOS中如何实现链式调用的DSL。</p>
</blockquote>

<h2 id="为什么需要使用masonry">为什么需要使用Masonry</h2>

<p>首先看下直接用<code class="language-plaintext highlighter-rouge">NSLayoutConstraints</code>方式布局视图需要什么操作：</p>

<p>例如：我们需要布局一个视图<code class="language-plaintext highlighter-rouge">view1</code>，使他距离父视图上下左右都为10，<code class="language-plaintext highlighter-rouge">NSLayoutConstraints</code>布局代码如下：</p>

<p>公式：<code class="language-plaintext highlighter-rouge">view1.top</code> = <code class="language-plaintext highlighter-rouge">superview.top</code> * 1.0 + 10</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UIView *superview = self.view;
    
    UIView *view1 = [[UIView alloc] init];
    view1.translatesAutoresizingMaskIntoConstraints = NO;
    view1.backgroundColor = [UIColor greenColor];
    [superview addSubview:view1];
    
    UIEdgeInsets padding = UIEdgeInsetsMake(10, 10, 10, 10);
    
    [superview addConstraints:@[

                                //view1 constraints
                                [NSLayoutConstraint constraintWithItem:view1
                                                             attribute:NSLayoutAttributeTop
                                                         relatedBy:NSLayoutRelationEqual
                                                            toItem:superview
                                                         attribute:NSLayoutAttributeTop
                                                        multiplier:1.0
                                                          constant:padding.top],

                            [NSLayoutConstraint constraintWithItem:view1
                                                         attribute:NSLayoutAttributeLeft
                                                         relatedBy:NSLayoutRelationEqual
                                                            toItem:superview
                                                         attribute:NSLayoutAttributeLeft
                                                        multiplier:1.0
                                                          constant:padding.left],

                            [NSLayoutConstraint constraintWithItem:view1
                                                         attribute:NSLayoutAttributeBottom
                                                         relatedBy:NSLayoutRelationEqual
                                                            toItem:superview
                                                         attribute:NSLayoutAttributeBottom
                                                        multiplier:1.0
                                                          constant:-padding.bottom],

                            [NSLayoutConstraint constraintWithItem:view1
                                                         attribute:NSLayoutAttributeRight
                                                         relatedBy:NSLayoutRelationEqual
                                                            toItem:superview
                                                         attribute:NSLayoutAttributeRight
                                                        multiplier:1
                                                          constant:-padding.right],

                            ]];
</code></pre></div></div>

<p>Masonry代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[view1 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.mas_equalTo(superview).with.insets(padding);
}];
</code></pre></div></div>

<p>由此可以看到使用<code class="language-plaintext highlighter-rouge">NSLayoutConstraints</code>方式布局代码及其冗余且不易读。</p>

<h2 id="masonry框架结构分析">Masonry框架结构分析</h2>

<p>主要的几个类：</p>

<ul>
  <li>View+MASAdditions.h</li>
  <li>MASConstraintMaker</li>
  <li>MASViewConstraint</li>
</ul>

<p><img src="https://i.loli.net/2019/05/27/5ceb29bd2fb7b97586.png" alt="masonry_struct_chart" /></p>

<h2 id="从调用mas_makeconstraints方法说起">从调用<code class="language-plaintext highlighter-rouge">mas_makeConstraints</code>方法说起</h2>

<p>首先我们看一个简单调用的例子：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[view1 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_equalTo(superview).offset(10)
}];
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">mas_makeConstraints:</code>实现如下：首先将<code class="language-plaintext highlighter-rouge">self.translatesAutoresizingMaskIntoConstraints</code>置为<code class="language-plaintext highlighter-rouge">NO</code>，关闭自动添加约束，改为我们手动添加，接着创建一个<code class="language-plaintext highlighter-rouge">MASConstraintMaker</code>对象，通过block将<code class="language-plaintext highlighter-rouge">constraintMaker</code>对象回调给用户，让用户对<code class="language-plaintext highlighter-rouge">constraintMaker</code>对象的属性进行初始化，其中<code class="language-plaintext highlighter-rouge">block(constraintMaker)</code>就相当于我们直接在该方法内部调用<code class="language-plaintext highlighter-rouge">make.left.mas_equalTo(superview).offset(10)</code>，然后调用<code class="language-plaintext highlighter-rouge">install</code>方法对约束进行安装，该方法返回一个数组，数组当中存放约束数组，成员类型为<code class="language-plaintext highlighter-rouge">MASViewConstraint</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *))block {
    self.translatesAutoresizingMaskIntoConstraints = NO;
    MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:self];
    block(constraintMaker);
    return [constraintMaker install];
}
</code></pre></div></div>

<p>紧接着看下<code class="language-plaintext highlighter-rouge">block</code>回调回来的操作是如何进行的，也就是下面的这些代码：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make.left.mas_equalTo(superview).offset(10)
</code></pre></div></div>

<p>点击去看下<code class="language-plaintext highlighter-rouge">.left</code>的调用实现：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (MASConstraint *)addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute {
    return [self constraint:nil addConstraintWithLayoutAttribute:layoutAttribute];
}

- (MASConstraint *)left {
    return [self addConstraintWithLayoutAttribute:NSLayoutAttributeLeft];
}
</code></pre></div></div>

<p>最后调用：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute {
    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:self.view layoutAttribute:layoutAttribute];
    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];
    if ([constraint isKindOfClass:MASViewConstraint.class]) {
        //replace with composite constraint
        NSArray *children = @[constraint, newConstraint];
        MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] initWithChildren:children];
        compositeConstraint.delegate = self;
        [self constraint:constraint shouldBeReplacedWithConstraint:compositeConstraint];
        return compositeConstraint;
    }
    if (!constraint) {
        newConstraint.delegate = self;
        [self.constraints addObject:newConstraint];
    }
    return newConstraint;
}
</code></pre></div></div>

<p>其中有一个<code class="language-plaintext highlighter-rouge">MASViewAttribute</code>的类，该类其实是对<code class="language-plaintext highlighter-rouge">UIView</code>和<code class="language-plaintext highlighter-rouge">NSLayoutAttribute</code>的封装
<code class="language-plaintext highlighter-rouge">MASViewConstraint</code>是对<code class="language-plaintext highlighter-rouge">NSLayoutConstraint</code>的封装，最后将布局约束添加到一个数组当中</p>

<p><code class="language-plaintext highlighter-rouge">block</code>回调执行完毕之后，最后对布局进行安装<code class="language-plaintext highlighter-rouge">[constraintMaker install]</code>，该方法，最后会调用到<code class="language-plaintext highlighter-rouge">MASViewConstraint</code>当中的<code class="language-plaintext highlighter-rouge">install</code>方法，其中有一个比较重要的方法：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MAS_VIEW *closestCommonSuperview = [self.firstViewAttribute.view mas_closestCommonSuperview:self.secondViewAttribute.view];
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (instancetype)mas_closestCommonSuperview:(MAS_VIEW *)view {
    MAS_VIEW *closestCommonSuperview = nil;     // 定义一个公共父视图

    MAS_VIEW *secondViewSuperview = view;
    while (!closestCommonSuperview &amp;&amp; secondViewSuperview) {    // 遍历secondView的父视图
        MAS_VIEW *firstViewSuperview = self;
        while (!closestCommonSuperview &amp;&amp; firstViewSuperview) { // 遍历当前视图的父视图
            if (secondViewSuperview == firstViewSuperview) {
                closestCommonSuperview = secondViewSuperview;   // 找到公共父视图
            }
            firstViewSuperview = firstViewSuperview.superview;
        }
        secondViewSuperview = secondViewSuperview.superview;
    }
    return closestCommonSuperview;
}
</code></pre></div></div>
<p>该方法是查找两个视图最近的公共父视图，这个类似求两个数字的最小公倍数。如果找到了就返回，如果找不到就返回nil。寻找两个视图的公共父视图对于约束的添加来说是非常重要的，因为相对的约束是添加到其公共父视图上的。比如举个列子 viewA.left = viewB.right + 10, 因为是viewA与viewB的相对约束，那么约束是添加在viewA与viewB的公共父视图上的，如果viewB是viewA的父视图，那么约束就添加在viewB上从而对viewA起到约束作用。</p>

<h2 id="遇到的问题">遇到的问题</h2>

<h4 id="mas_shorthand-和-mas_shorthand_globals的含义">MAS_SHORTHAND 和 MAS_SHORTHAND_GLOBALS的含义</h4>

<ul>
  <li>MAS_SHORTHAND: 如果我们用<code class="language-plaintext highlighter-rouge">Masonry</code>框架不想写<code class="language-plaintext highlighter-rouge">mas_</code>前缀，需要在导入头文件之前定义这个宏</li>
  <li>MAS_SHORTHAND_GLOBALS: 定义这个宏，可以让<code class="language-plaintext highlighter-rouge">equalTo</code>接受基本数据类型，内部会对基本数据类型进行封装</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//define this constant if you want to use Masonry without the 'mas_' prefix
#define MAS_SHORTHAND
//define this constant if you want to enable auto-boxing for default syntax
#define MAS_SHORTHAND_GLOBALS
#import "Masonry.h"
</code></pre></div></div>

<h4 id="convenience-initializer-和-designated-initializer"><code class="language-plaintext highlighter-rouge">Convenience initializer</code> 和 <code class="language-plaintext highlighter-rouge">designated initializer</code></h4>

<p>在我们阅读<code class="language-plaintext highlighter-rouge">masonry</code>源码的过程中，我们发现有两个初始化方法，注释不太一样，位于<code class="language-plaintext highlighter-rouge">MASViewAttribute</code>类下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/**
 *  Convenience initializer.
 */
- (id)initWithView:(MAS_VIEW *)view layoutAttribute:(NSLayoutAttribute)layoutAttribute;

/**
 *  The designated initializer.
 */
- (id)initWithView:(MAS_VIEW *)view item:(id)item layoutAttribute:(NSLayoutAttribute)layoutAttribute;
</code></pre></div></div>

<p>这两种初始化的方式有什么区别呢，平时在我们开发当中，我们可能需要通过初始化来确定一些属性的值，并不想由外界来修改它，于是我们可能会需要些很多个<code class="language-plaintext highlighter-rouge">initWith</code>方法，加入我的这个对象有姓名、性别、年龄等属性，但是我初始化的时候，并不是所有地方都要知道这些信息，于是我们可能会有<code class="language-plaintext highlighter-rouge">initWithUserName:</code>、<code class="language-plaintext highlighter-rouge">initWithSex:</code>、<code class="language-plaintext highlighter-rouge">initWithUserName:age:</code>等方法，为了管理我们的<code class="language-plaintext highlighter-rouge">initWith</code>方法，<code class="language-plaintext highlighter-rouge">Apple</code> 将 <code class="language-plaintext highlighter-rouge">init</code> 方法分为两种类型：<code class="language-plaintext highlighter-rouge">designated initializer</code> 和 <code class="language-plaintext highlighter-rouge">convenience initializer</code> (又叫 <code class="language-plaintext highlighter-rouge">secondary initializer</code>)</p>

<p><code class="language-plaintext highlighter-rouge">designated initializer</code> 只有一个，它会为 <code class="language-plaintext highlighter-rouge">class </code>当中每个 <code class="language-plaintext highlighter-rouge">property</code> 都提供一个初始值，是最完整的 <code class="language-plaintext highlighter-rouge">initWith</code> 方法，例如我们在<code class="language-plaintext highlighter-rouge">masonry</code>当中也可以看到：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (id)initWithView:(MAS_VIEW *)view layoutAttribute:(NSLayoutAttribute)layoutAttribute {
    self = [self initWithView:view item:view layoutAttribute:layoutAttribute];
    return self;
}

- (id)initWithView:(MAS_VIEW *)view item:(id)item layoutAttribute:(NSLayoutAttribute)layoutAttribute {
    self = [super init];
    if (!self) return nil;
    
    _view = view;
    _item = item;
    _layoutAttribute = layoutAttribute;
    
    return self;
}
</code></pre></div></div>

<p>最终都会调用到<code class="language-plaintext highlighter-rouge">- (id)initWithView:(MAS_VIEW *)view item:(id)item layoutAttribute:(NSLayoutAttribute)layoutAttribute</code>方法</p>

<p><code class="language-plaintext highlighter-rouge">convenience initializer</code> 则可以有很多个，它可以选择只初始化部分的 <code class="language-plaintext highlighter-rouge">property</code>。<code class="language-plaintext highlighter-rouge">convenience initializer</code> 最后到会调用到 <code class="language-plaintext highlighter-rouge">designated initializer</code>，所以 <code class="language-plaintext highlighter-rouge">designated initializer</code> 也可以叫做 <code class="language-plaintext highlighter-rouge">final initializer</code></p>

<h4 id="ns_noescape修饰符">NS_NOESCAPE修饰符</h4>
<p>在<code class="language-plaintext highlighter-rouge">masonry</code>源码当中，我们看到在修饰<code class="language-plaintext highlighter-rouge">block</code>的时候用到了<code class="language-plaintext highlighter-rouge">NS_NOESCAPE</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (NSArray *)mas_makeConstraints:(void(NS_NOESCAPE ^)(MASConstraintMaker *make))block;
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">NS_NOESCAPE</code>用于修饰方法中的<code class="language-plaintext highlighter-rouge">block</code>类型参数，作用是告诉编译器，这个<code class="language-plaintext highlighter-rouge">block</code>在<code class="language-plaintext highlighter-rouge">mas_makeConstraints:</code>方法返回之前就会执行完毕，而不是被保存起来在之后的某个时候再执行</p>

<h4 id="masonry为什么不会引起循环引用"><code class="language-plaintext highlighter-rouge">masonry</code>为什么不会引起循环引用</h4>

<p>比如我们可能经常会写如下代码：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[self.view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.equalTo(self.view.superview).offset(10);
}];
</code></pre></div></div>
<p>这里为什么不需要写<code class="language-plaintext highlighter-rouge">@weakify(self)</code>，接着看<code class="language-plaintext highlighter-rouge">mas_makeConstraints:</code>是如何实现的：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *))block {
    self.translatesAutoresizingMaskIntoConstraints = NO;
    MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:self];
    block(constraintMaker);
    return [constraintMaker install];
}
</code></pre></div></div>
<p>从代码中可以看到，<code class="language-plaintext highlighter-rouge">block</code>强引用了<code class="language-plaintext highlighter-rouge">self</code>,但是在<code class="language-plaintext highlighter-rouge">mas_makeConstraints:</code>方法中<code class="language-plaintext highlighter-rouge">self</code>并没有直接或间接持有<code class="language-plaintext highlighter-rouge">block</code>，而是直接调用<code class="language-plaintext highlighter-rouge">block(constraintMaker)</code>,所以不会引起强引用</p>

<h2 id="链式调用实战应用">链式调用实战应用</h2>

<p>在我们开发过程中，我们会经常用到<code class="language-plaintext highlighter-rouge">UILabel</code>，每次初始化都要设置一堆的属性，比较麻烦，当然我们也可以采取类似如下方法：<code class="language-plaintext highlighter-rouge">+ (UILabel *)createLabelWithFont:(UIFont *)font andTextColor:(UIColor *)color andDefaultContent:(NSString *)content</code>，但是一旦我们所需要初始化的参数比较多时，就会造成方法参数非常多，甚至我们有些参数根本不需要初始化，用链式编程该如何实现呢？？</p>

<ul>
  <li>首先为<code class="language-plaintext highlighter-rouge">UILabel</code>创建一个<code class="language-plaintext highlighter-rouge">category</code>，<code class="language-plaintext highlighter-rouge">#import "UILabel+zjLabel.h"</code>，代码如下：</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#import "UILabel+zjLabel.h"

@implementation UILabel (zjLabel)

+ (UILabel *)zj_createLabel:(void (^)(UILabel * _Nonnull))block{
    UILabel *label = [UILabel new];
    block(label);
    return label;
}
    
- (UILabel *(^)(NSString *))zj_text{
    return ^(NSString *str){
        self.text = str;
        
        return self;
    };
}
    
- (UILabel *(^)(UIFont *))zj_font{
    return ^(UIFont *font){
        self.font = font;
        return self;
    };
}
    
- (UILabel *(^)(UIColor *))zj_textColor{
    return ^(UIColor *color){
        self.textColor = color;
        return self;
    };
}
 
- (UILabel *(^)(NSTextAlignment))zj_textAlignment{
    return ^(NSTextAlignment aligment){
        self.textAlignment = aligment;
        return self;
    };
}
</code></pre></div></div>

<p>在需要的地方调用方式如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UILabel *label = [UILabel zj_createLabel:^(UILabel * _Nonnull label) {
        label.zj_text(@"haha").zj_font([UIFont systemFontOfSize:24]).zj_textColor(UIColor.redColor);
    }];
    
[superview addSubview:label];
</code></pre></div></div>

<p>不需要初始化的参数可以直接不写，只初始化我们需要的</p>

<h2 id="总结">总结</h2>

<p>另外很多人担心自动布局的性能问题，事实上苹果已经在iOS12中对<code class="language-plaintext highlighter-rouge">auto layout</code>进行优化：</p>

<p><a href="https://developer.apple.com/videos/play/wwdc2018/202/">WWDC2018讲解了iOS12优化后的表现</a>
<img src="https://i.loli.net/2019/05/27/5ceb29bd763ad56547.png" alt="auto_layout_ optimize" /></p>

<p>可以看到在iOS12之前<code class="language-plaintext highlighter-rouge">auto layout</code>性能会随着嵌套视图的增加呈指数增长，但是在iOS12上苹果官方已经对此进行了优化，随着嵌套视图的增加性能问题得到了大幅的提升。</p>

<p>链式编程的特点：方法返回值是<code class="language-plaintext highlighter-rouge">block</code>，而且该<code class="language-plaintext highlighter-rouge">block</code>必须有返回值，返回值就是对象本身，<code class="language-plaintext highlighter-rouge">block</code>也可以输入参数</p>

<p>另外<code class="language-plaintext highlighter-rouge">Masonry</code>框架分析部分，做了简单的分析，想要看详细的<a href="https://www.cnblogs.com/ludashi/archive/2016/07/11/5591572.html">参考下方链接</a>，作者写的太详细了，我都不知道写啥了。。。。。</p>

<h2 id="refrence">Refrence：</h2>

<p>https://www.cnblogs.com/ludashi/archive/2016/07/11/5591572.html</p>

:ET