I"o)<p><a href="https://www.jianshu.com/p/89093871596b">上篇文章讲到</a>，如果通过<code class="language-plaintext highlighter-rouge">_class_resolveInstanceMethod</code>和<code class="language-plaintext highlighter-rouge">- (id)forwardingTargetForSelector:(SEL)aSelector</code>还是没找到IMP,也就是方法的实现，那我们只能手动添加方法的实现，也就是上篇文章提到的<code class="language-plaintext highlighter-rouge">regular forwarding</code>或者<code class="language-plaintext highlighter-rouge">Normal Forwarding</code>：</p>

<p>我们先看一下方法的调用过程都执行了哪些方法？首先我们把方法实现注释掉。
<img src="http://otogtitz7.bkt.clouddn.com/2018-03-28-15222251043432.jpg" alt="" /></p>

<p>首先在方法调用的地方打一个断点，然后在控制台执行<code class="language-plaintext highlighter-rouge">call (void)instrumentObjcMessageSends(YES)</code>，继续执行，打印结果：</p>

<p><img src="http://otogtitz7.bkt.clouddn.com/2018-03-28-15222252259604.jpg" alt="" /></p>

<p>然后我们前往文件夹</p>

<p><img src="http://otogtitz7.bkt.clouddn.com/2018-03-28-15222252771728.jpg" alt="" /></p>

<p>找到<code class="language-plaintext highlighter-rouge">msgSends</code>开头的文件，打开会看到如下执行过程：</p>

<p><img src="http://otogtitz7.bkt.clouddn.com/2018-03-28-15222253682896.jpg" alt="" /></p>

<p>所以我们可以得出结论，程序向某个对象发送没实现的消息，在程序崩溃之前会给我们三次机会弥补，接下来，我们用代码来验证第一个方法<code class="language-plaintext highlighter-rouge">resolveInstanceMethod:</code></p>

<h2 id="resolveinstancemethod">resolveInstanceMethod:</h2>

<p>第一种方式：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+ (BOOL)resolveInstanceMethod:(SEL)sel{
    
    if (sel == @selector(eat)) {
        
        class_addMethod([self class], sel, imp_implementationWithBlock(^{
            
            NSLog(@"resolveInstanceMethod====");
            
        }), "v@:");
        
        return YES;
    }
    return [super resolveInstanceMethod:sel];
}
</code></pre></div></div>

<p>第二种方式：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void myMethodIMP(id self, SEL _cmd)
{
    NSLog(@"resolveInstanceMethod====");
}

+ (BOOL)resolveInstanceMethod:(SEL)sel{
    
    if (sel == @selector(eat)) {
        
        class_addMethod([self class], sel, (IMP)myMethodIMP, "v@:");
        
        return YES;
    }
    return [super resolveInstanceMethod:sel];
}
</code></pre></div></div>

<p>代码中的<code class="language-plaintext highlighter-rouge">"v@:"</code>表示方法的参数和返回值，<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1">可参考这里</a></p>

<p>上面两种方法的任意一种都能是程序正常执行：
<img src="http://otogtitz7.bkt.clouddn.com/2018-03-28-15222266670256.jpg" alt="" /></p>

<h2 id="forwardingtargetforselector">forwardingTargetForSelector:</h2>

<p>如果上面的方法<code class="language-plaintext highlighter-rouge">+ (BOOL)resolveInstanceMethod:(SEL)sel</code>返回NO,接着就会进行消息转发,执行<code class="language-plaintext highlighter-rouge">forwardingTargetForSelector:</code>，继续试验：</p>

<p>首先我们新建一个<code class="language-plaintext highlighter-rouge">PersonNew</code>的类，在该类中实现<code class="language-plaintext highlighter-rouge">- (void)eat</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#import "PersonNew.h"

@implementation PersonNew

- (void)eat{
    NSLog(@"Person eat=======");
}

@end
</code></pre></div></div>

<p>然后回到<code class="language-plaintext highlighter-rouge">Person</code>类中实现如下代码：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+ (BOOL)resolveInstanceMethod:(SEL)sel{
    
    return [super resolveInstanceMethod:sel];
}

- (id)forwardingTargetForSelector:(SEL)aSelector{
    
    if (aSelector == @selector(eat)) {
        return [PersonNew new];
    }
    
    return [super forwardingTargetForSelector:aSelector];
}
</code></pre></div></div>

<p>发现程序也是可以正常执行的：</p>

<p><img src="http://otogtitz7.bkt.clouddn.com/2018-03-28-15222271717976.jpg" alt="" /></p>

<p>事实证明，如果实现这个方法，程序在运行时调用的时候只要不返回<code class="language-plaintext highlighter-rouge">nil</code>或者<code class="language-plaintext highlighter-rouge">self</code>，系统会将该消息转发给别的对象来处理，在别的对象当中，甚至不需要再头文件将方法名暴露出来，系统会找到要转发的类，自动查找。</p>

<h2 id="methodsignatureforselector">methodSignatureForSelector:</h2>

<p>如果上面的两种方式无法找到方法的实现，那么我们就只能自己创建一个<code class="language-plaintext highlighter-rouge">NSInvocation</code>对象，实现代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+ (BOOL)resolveInstanceMethod:(SEL)sel{
    
    return [super resolveInstanceMethod:sel];
}

- (id)forwardingTargetForSelector:(SEL)aSelector{
    
//    if (aSelector == @selector(eat)) {
//        return [PersonNew new];
//    }
    return [super forwardingTargetForSelector:aSelector];
}

- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector{
    if (aSelector == @selector(eat)) {
        return [NSMethodSignature signatureWithObjCTypes:"v@:"];
    }
    return [super methodSignatureForSelector:aSelector];
}

- (void)forwardInvocation:(NSInvocation *)anInvocation{
    
    if (anInvocation.selector == @selector(eat)) {
        [anInvocation invokeWithTarget:[PersonNew new]];
        return;
    }
    
    [super forwardInvocation:anInvocation];
    
}
</code></pre></div></div>

<p>上面代码证明，当程序在上面两种方法之后都没有找到IMP,程序会尝试调用<code class="language-plaintext highlighter-rouge">methodSignatureForSelector:</code>方法，获取方法的参数和返回值，如果返回<code class="language-plaintext highlighter-rouge">nil</code>,程序就会<code class="language-plaintext highlighter-rouge">Crash</code>，如果返回一个方法签名，系统就会创建一个<code class="language-plaintext highlighter-rouge">NSInvocation</code>对象并调用<code class="language-plaintext highlighter-rouge">- (void)forwardInvocation:</code>方法。</p>

<h2 id="class方法">class方法</h2>

<p>如果上面三个方法都没能找到IMP(也就是方法的实现)，通过上面的打印，我们看到程序还会执行<code class="language-plaintext highlighter-rouge">class</code>方法，我查了好多资料，都没有介绍<code class="language-plaintext highlighter-rouge">class</code>方法是干什么的，本着刨根问底的精神，我做了好久的实验，发现了，如果前面三种方式都不行的话，其实这个方法还是有点儿用处的，请看代码：</p>

<p>首先前面三个方法我们都不重写，然后把对应的方法实现注释掉</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (void)forwardInvocation:(NSInvocation *)anInvocation{
    
    if (anInvocation.selector == @selector(eat)) {
        [anInvocation invokeWithTarget:[PersonNew new]];
        return;
    }
    
    [super forwardInvocation:anInvocation];
    
}

- (Class)class{
   
    return [PersonNew class];
}
</code></pre></div></div>

<p>注意：我重写了class方法，返回一个有方法实现的类。</p>

<p><img src="http://otogtitz7.bkt.clouddn.com/2018-03-28-15222319274916.jpg" alt="" /></p>

<p>发现程序依然可以正常运行。。。。</p>

<p>我怀疑：如果程序没有通过前面三种方法找到方法的实现，程序会动态调用一次<code class="language-plaintext highlighter-rouge">- (Class)class</code>方法，查看我们是否改变了对象所指向的类，如果发现我们改变了，程序就会通过消息转发<code class="language-plaintext highlighter-rouge">forwardInvocation:(NSInvocation *)anInvocation</code>找到方法的实现。</p>

<h3 id="请注意千万不要轻易重写--classclass方法因为如果我们这样重写了这个方法那么相对应的类对象就会变成我们重写之后的类对象">请注意：千万不要轻易重写<code class="language-plaintext highlighter-rouge">- (Class)class</code>方法，因为如果我们这样重写了这个方法，那么相对应的类对象就会变成我们重写之后的类对象</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Person *p = [[Person alloc] init];
        
PersonNew *p1 = [[PersonNew alloc] init];
   
[p eat];
   
NSLog(@"");
</code></pre></div></div>

<p>打印对应的类对象如下：</p>

<p><img src="http://otogtitz7.bkt.clouddn.com/2018-03-28-15222326123191.jpg" alt="" /></p>

<h2 id="doesnotrecognizeselector">doesNotRecognizeSelector:</h2>

<p>终于到最后一步了，好累。。。。。</p>

<p>如果通过前面的种种方式都没法找到对应的IMP实现，那就完蛋了，神仙都救不了它了，程序最终会执行<code class="language-plaintext highlighter-rouge">doesNotRecognizeSelector:</code>方法：</p>

<p>请看对应的底层实现：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Replaced by CF (throws an NSException)
- (void)doesNotRecognizeSelector:(SEL)sel {
    _objc_fatal("-[%s %s]: unrecognized selector sent to instance %p", 
                object_getClassName(self), sel_getName(sel), self);
}
</code></pre></div></div>

<p>跟我们的<code class="language-plaintext highlighter-rouge">Crash</code>信息做下对比</p>

<p><img src="http://otogtitz7.bkt.clouddn.com/2018-03-28-15222329055754.jpg" alt="" /></p>

<p>是不是看着很熟悉，没错，就是挂了。。。</p>

<p><a href="https://github.com/czjwarrior/RunTimeDemo"><strong>代码地址</strong></a></p>

<p><br />
终于写完了，觉得不错的，请点赞❤️❤️❤️！！！谢谢！！！</p>

:ET